let arg,fs,Gradient,readline,ac,copy;_0f1‍.x([["cli",()=>cli]]);_0f1‍.w("arg",[["default",["arg"],function(v){arg=v}]]);_0f1‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_0f1‍.w("gradient-string",[["default",["Gradient"],function(v){Gradient=v}]]);_0f1‍.w("readline",[["default",["readline"],function(v){readline=v}]]);_0f1‍.w("ansi-colors",[["default",["ac"],function(v){ac=v}]]);_0f1‍.w("recursive-copy",[["default",["copy"],function(v){copy=v}]]);






let gradient = Gradient([
    {color: '#d42dcfff', pos: 0},
    {color: '#04d9d9ff', pos: 1}
  ]);


  async function logLogo(){
      _0f1‍.g.console.log(gradient(`
      ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────
      ─██████████████─██████████─██████──────────██████─██████████████─██████─────────██████████████─████████──████████─
      ─██░░░░░░░░░░██─██░░░░░░██─██░░██████████████░░██─██░░░░░░░░░░██─██░░██─────────██░░░░░░░░░░██─██░░░░██──██░░░░██─
      ─██░░██████████─████░░████─██░░░░░░░░░░░░░░░░░░██─██░░██████░░██─██░░██─────────██░░██████████─████░░██──██░░████─
      ─██░░██───────────██░░██───██░░██████░░██████░░██─██░░██──██░░██─██░░██─────────██░░██───────────██░░░░██░░░░██───
      ─██░░██████████───██░░██───██░░██──██░░██──██░░██─██░░██████░░██─██░░██─────────██░░██████████───████░░░░░░████───
      ─██░░░░░░░░░░██───██░░██───██░░██──██░░██──██░░██─██░░░░░░░░░░██─██░░██─────────██░░░░░░░░░░██─────████░░████─────
      ─██████████░░██───██░░██───██░░██──██████──██░░██─██░░██████████─██░░██─────────██░░██████████───────██░░██───────
      ─────────██░░██───██░░██───██░░██──────────██░░██─██░░██─────────██░░██─────────██░░██───────────────██░░██───────
      ─██████████░░██─████░░████─██░░██──────────██░░██─██░░██─────────██░░██████████─██░░██████████───────██░░██───────
      ─██░░░░░░░░░░██─██░░░░░░██─██░░██──────────██░░██─██░░██─────────██░░░░░░░░░░██─██░░░░░░░░░░██───────██░░██───────
      ─██████████████─██████████─██████──────────██████─██████─────────██████████████─██████████████───────██████───────
      ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n\n\n\n`))
  }
  async function log(message) {
    _0f1‍.g.console.log(gradient(message))
}

function parseArgumentsIntoOptions(rawArgs) {
 const args = arg(
   {
     

   },
   {
     argv: rawArgs.slice(2),
   }
 );
 return {
   cmd: args._[0]
 };``
}



       async function cli(args) {
 let options = parseArgumentsIntoOptions(args);

 if (!options.cmd) {
     console.clear();
logLogo()

var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });







  rl.question(gradient("> What would you like to create    "), async function(input1) {

const possibleAnswers = ['slash']

if (!possibleAnswers.includes(input1)) {
     _0f1‍.g.console.log(gradient("\nPlease enter a valid input"))
     rl.close()
     return;
} else {

    fs.mkdir(`./${input1}`, (err) => {
        if (err) {
            throw err;
        }
    });


    copy(__dirname + `/templates/Slash-Command-Handler`, `./${input1}`, function(error, results) {
        if (error) {
            _0f1‍.g.console.log(gradient("\n\nUnable To Create Files!\n\n"))
        } else {

            _0f1‍.g.console.log(gradient(`\n\nMade ${results.length} files in ${input1}\n\n`));
        }
    });
    


    rl.close()
}

  });


 }
 

}